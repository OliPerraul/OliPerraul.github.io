(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{176:function(e,t,r){"use strict";t.a={name:"VueRemarkRoot",render:function(e){return e("div",null,this.$slots.default)}}},369:function(e,t,r){"use strict";r.r(t);var n=r(36),o=r(176),d=r(1);function a(e){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}d.default.config.optionMergeStrategies;var i={VueRemarkRoot:o.a},s=function(e){var t=e.options.components=e.options.components||{},r=e.options.computed=e.options.computed||{};Object.keys(i).forEach((function(e){"object"===a(i[e])&&"function"==typeof i[e].render?t[e]=i[e]:r[e]=function(){return i[e]}}))},u=d.default.config.optionMergeStrategies,l="__vueRemarkFrontMatter",c={excerpt:null,slug:"glossaire",order:2,title:"Glossaire",author:"Charline Unternährer",tag:"global"};var p=function(e){e.options[l]&&(e.options[l]=c),d.default.util.defineReactive(e.options,l,c),e.options.computed=u.computed({$frontmatter:function(){return e.options[l]}},e.options.computed)},v=Object(n.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("VueRemarkRoot",[r("h2",{attrs:{id:"2-glossaire"}},[r("a",{attrs:{href:"#2-glossaire","aria-hidden":"true"}},[r("span",{staticClass:"icon icon-link"})]),e._v("2. Glossaire")]),r("table",[r("thead",[r("tr",[r("th",[e._v("Mot-clé")]),r("th",[e._v("Signification")])])]),r("tbody",[r("tr",[r("td",[r("code",{pre:!0},[e._v("abstract")])]),r("td",[e._v("mot-clé pour désigner explicitement qu'une méthode est abstraite, donc générique, et que chaque sous-classe doit alors la définir à sa manière ; une classe contenant une méthode abstraite est elle-même abstraite et ne peut être instanciée")])]),r("tr",[r("td",[e._v("abstraction")]),r("td",[e._v("description générique d'une entité qui possède des caractéristiques communes")])]),r("tr",[r("td",[e._v("affectation")]),r("td",[e._v("lorsqu'on donne ou change la valeur d'une variable après qu'elle ait été déclarée")])]),r("tr",[r("td",[r("code",{pre:!0},[e._v("ArrayList")])]),r("td",[e._v("mot-clé pour le type de données des listes dynamiques (collection de valeurs homogènes)")])]),r("tr",[r("td",[e._v("attribut")]),r("td",[e._v('donnée d\'une classe ; représente la relation "a-un"')])]),r("tr",[r("td",[e._v("bloc d'instructions")]),r("td",[e._v("séries d'instructions délimitée par des accolades "),r("code",{pre:!0},[e._v("{...}")])])]),r("tr",[r("td",[r("code",{pre:!0},[e._v("char")])]),r("td",[e._v("mot-clé pour le type de données des caractères")])]),r("tr",[r("td",[r("code",{pre:!0},[e._v("class")])]),r("td",[e._v("mot-clé pour désigner une classe")])]),r("tr",[r("td",[e._v("compilateur")]),r("td",[e._v("Un programme qui transforme du code dans un langage de programmation compréhensible par l'humain en langage de plus bas niveau compréhensible par un "),r("strong",[e._v("environnement d'exécution")]),e._v(" ou par la machine.")])]),r("tr",[r("td",[e._v("classe")]),r("td",[e._v("représentation d'une entité (d'un objet) qui possède des attributs et des méthodes ; une classe devient un nouveau type évolué")])]),r("tr",[r("td",[e._v("condition")]),r("td",[e._v("point de départ d'un branchement conditionnel, une condition est de type booléen")])]),r("tr",[r("td",[e._v("constante")]),r("td",[e._v("variable qui ne peut pas changer de valeur après son initialisation, elle utilise le mot-clé "),r("code",{pre:!0},[e._v("final")])])]),r("tr",[r("td",[e._v("constructeur")]),r("td",[e._v("méthode publique portant le même nom que sa classe, sans type de retour et permettant d'initialiser les attributs de la classe")])]),r("tr",[r("td",[e._v("constructeur par défaut")]),r("td",[e._v("constructeur qui ne demande pas de paramètre")])]),r("tr",[r("td",[e._v("corps")]),r("td",[e._v("bloc d'instructions")])]),r("tr",[r("td",[e._v("déclaration")]),r("td",[e._v("lorsqu'une variable est créée")])]),r("tr",[r("td",[r("code",{pre:!0},[e._v("double")])]),r("td",[e._v("mot-clé pour le type de données des nombres décimaux")])]),r("tr",[r("td",[r("code",{pre:!0},[e._v("do...while")])]),r("td",[e._v('mot-clé pour la boucle conditionnelle "fait...tant que"')])]),r("tr",[r("td",[e._v("environnement d'exécution")]),r("td",[e._v("Programme tel "),r("em",[e._v("Java Runtime")]),e._v(" capable d'exécuter/interpréter un programme compilé en langage intermédiaire.")])]),r("tr",[r("td",[r("code",{pre:!0},[e._v("else")])]),r("td",[e._v('mot-clé pour la branche "sinon" d\'un branchement conditionnel ; ses instructions sont exécutées si la condition est fausse')])]),r("tr",[r("td",[e._v("encapsulation")]),r("td",[e._v("regroupement de données et de traitements au sein d'une seule entité")])]),r("tr",[r("td",[e._v("expression")]),r("td",[e._v("valeur littérale ou formule utilisant des opérateurs ; l'expression est la valeur donnée à une variable lors de son affectation")])]),r("tr",[r("td",[r("code",{pre:!0},[e._v("extends")])]),r("td",[e._v("mot-clé pour désigner la super-classe dont hérite la sous-classe")])]),r("tr",[r("td",[r("code",{pre:!0},[e._v("final")])]),r("td",[e._v("mot-clé pour les constantes")])]),r("tr",[r("td",[r("code",{pre:!0},[e._v("for")])]),r("td",[e._v("mot-clé pour l'itération")])]),r("tr",[r("td",[e._v("getter")]),r("td",[e._v("méthode publique permettant d'accéder à un attribut privé")])]),r("tr",[r("td",[e._v("héritage")]),r("td",[e._v('notion de spécialisation ; une sous-classe hérite des attributs et méthodes de sa super-classe, à l\'execption du constructeur ; représente la relation "est-un"')])]),r("tr",[r("td",[e._v("identificateur")]),r("td",[e._v(" nom donné à la variable qui permet son identification parmi toutes les autres varaibles du programme ; l'identificateur doit donc être unique au sein d'un même programme")])]),r("tr",[r("td",[r("code",{pre:!0},[e._v("if")])]),r("td",[e._v(' mot-clé pour la branche "si" d\'un branchement conditionnel ; ses instructions sont exécutées si la condition est vraie')])]),r("tr",[r("td",[e._v("initialisation")]),r("td",[e._v("lorsque la variable reçoit une valeur en même temps que sa déclaration")])]),r("tr",[r("td",[e._v("instance (de classe)")]),r("td",[e._v("objet, variable dont le type est une classe")])]),r("tr",[r("td",[r("code",{pre:!0},[e._v("int")])]),r("td",[e._v("mot-clé pour le type de données des nombres entiers")])]),r("tr",[r("td",[r("code",{pre:!0},[e._v("LinkedList")])]),r("td",[e._v("mot-clé pour le type de données des listes chaînées (collection de valeurs homogènes)")])]),r("tr",[r("td",[e._v("méthode")]),r("td",[e._v("fonction contenant une suite d'instructions réutilisable et comportant un nom, des arguments, un type de retour et un corps")])]),r("tr",[r("td",[r("code",{pre:!0},[e._v("nextDouble()")])]),r("td",[e._v("méthode de la classe "),r("code",{pre:!0},[e._v("Scanner")]),e._v(" qui permet de lire un nombre décimal")])]),r("tr",[r("td",[r("code",{pre:!0},[e._v("nextInt()")])]),r("td",[e._v("méthode de la classe "),r("code",{pre:!0},[e._v("Scanner")]),e._v(" qui permet de lire un nombre entier")])]),r("tr",[r("td",[e._v("objet")]),r("td",[e._v("entité qui possède des données (attributs) et des traitements (méthodes)")])]),r("tr",[r("td",[e._v("opérateur de comparaison")]),r("td",[e._v("opérateur utilisé pour comparer deux expressions")])]),r("tr",[r("td",[e._v("opérateur logique")]),r("td",[e._v("opérateur pour lier deux conditions simples")])]),r("tr",[r("td",[e._v("passage par référence")]),r("td",[e._v("passage d'argument(s) de type élémentaire ; la valeur de ceux-ci ne peut pas être modifiée")])]),r("tr",[r("td",[e._v("passage par valeur")]),r("td",[e._v("passage d'argument(s) de type évolé ; la valeur de ceux-ci peut être modifiée")])]),r("tr",[r("td",[e._v("polymorphisme")]),r("td",[e._v("notion liée à l'héritage ; exécutions différentes d'une même code selon l'entité à laquelle il s'applique")])]),r("tr",[r("td",[e._v("OOP")]),r("td",[e._v("programmation orienté objet")])]),r("tr",[r("td",[e._v("portée (d'une variable)")]),r("td",[e._v("ensemble des lignes d'instructions où une varaible est accessible")])]),r("tr",[r("td",[r("code",{pre:!0},[e._v("private")])]),r("td",[e._v("un élément est privé si son implémentation et son utilisation sont inaccessible pour le programmeur utilisateur")])]),r("tr",[r("td",[r("code",{pre:!0},[e._v("public")])]),r("td",[e._v("un élément est public si son utilisation est visible et que l'élément lui-même est utilisable pour le programmeur utilisateur")])]),r("tr",[r("td",[r("code",{pre:!0},[e._v("Scanner")])]),r("td",[e._v("classe qui permet de lire une valeur transmise par l'utilisateur à travers le terminal")])]),r("tr",[r("td",[e._v("setter")]),r("td",[e._v("méthode publique permettant de modifier à un attribut privé")])]),r("tr",[r("td",[e._v("spécialisation")]),r("td",[e._v("redéfinition d'une méthode héritée")])]),r("tr",[r("td",[r("code",{pre:!0},[e._v("String")])]),r("td",[e._v("mot-clé pour le type de données des chaînes de caractères")])]),r("tr",[r("td",[r("code",{pre:!0},[e._v("super")])]),r("td",[e._v("mot-clé pour appeler le constructeur de la super-classe")])]),r("tr",[r("td",[r("code",{pre:!0},[e._v("System.out.println();")])]),r("td",[e._v("Fonction d'affichage")])]),r("tr",[r("td",[e._v("type")]),r("td",[e._v('"genre" d\'une variable')])]),r("tr",[r("td",[e._v("type de base ou élémentaire")]),r("td",[e._v("type dont le mot-clé commence par une minuscule et dont la variable stocke directement sa valeur")])]),r("tr",[r("td",[e._v("type évolué")]),r("td",[e._v("type dont le mot-clé commence par une majuscule et dont la variable stocke la référence (adresse) de la valeur")])]),r("tr",[r("td",[e._v("valeur")]),r("td",[e._v("contenu de la variable")])]),r("tr",[r("td",[e._v("variable")]),r("td",[e._v('"boîte" qui possède un identificateur, un type et qui contient une valeur')])]),r("tr",[r("td",[e._v("variable globale")]),r("td",[e._v("variable accessible dans toute la classe")])]),r("tr",[r("td",[e._v("variable locale")]),r("td",[e._v("variable accessible uniquement dans le bloc d'instructions où elle est déclarée")])]),r("tr",[r("td",[r("code",{pre:!0},[e._v("void")])]),r("td",[e._v("mot-clé pour les méthodes n'ayant pas de type de retour")])]),r("tr",[r("td",[r("code",{pre:!0},[e._v("while...")])]),r("td",[e._v('mot-clé pour la boucle conditionnelle "tant que..."')])]),r("tr",[r("td",[r("code",{pre:!0},[e._v("<")])]),r("td",[e._v("opérateur de comparaison : "),r("strong",[e._v("inférieur à")])])]),r("tr",[r("td",[r("code",{pre:!0},[e._v(">")])]),r("td",[e._v("opérateur de comparaison : "),r("strong",[e._v("supérieur à")])])]),r("tr",[r("td",[r("code",{pre:!0},[e._v("==")])]),r("td",[e._v("opérateur de comparaison : "),r("strong",[e._v("égal à")])])]),r("tr",[r("td",[r("code",{pre:!0},[e._v("<=")])]),r("td",[e._v("opérateur de comparaison : "),r("strong",[e._v("inférieur ou égal à")])])]),r("tr",[r("td",[r("code",{pre:!0},[e._v(">=")])]),r("td",[e._v("opérateur de comparaison : "),r("strong",[e._v("supérieur ou égal à")])])]),r("tr",[r("td",[r("code",{pre:!0},[e._v("!=")])]),r("td",[e._v("opérateur de comparaison : "),r("strong",[e._v("différent de")])])]),r("tr",[r("td",[r("code",{pre:!0},[e._v("&&")])]),r("td",[e._v("opérateur logique "),r("strong",[e._v("ET")]),e._v(" : les deux conditions doivent être vraies")])]),r("tr",[r("td",[r("code",{pre:!0},[e._v("||")])]),r("td",[e._v("opérateur logique "),r("strong",[e._v("OU")]),e._v(" : au moins une condition doit êre vraie")])]),r("tr",[r("td",[r("code",{pre:!0},[e._v("!")])]),r("td",[e._v("opérateur logique "),r("strong",[e._v("NON")]),e._v(' : à considérer comme "ne pas", "différent de", "inverse de"')])])])])])}),[],!1,null,null,null);"function"==typeof s&&s(v),"function"==typeof p&&p(v);t.default=v.exports}}]);